#summary This pages describes how BFT-SMaRt works.

= Introduction =

BFT-SMaRt is a replication library written in Java. It implements state machine replication. It is designed to tolerate Byzantine faults, while still being highly efficient - even if some replicas are faulty. In this page we describe how this library works, in a high level of abstraction.

= State Machine Replication (SMR) =

SMR is a replication technique where an arbitrary number of clients issue commands to a set of servers dubbed *replicas*. These replicas implement a *stateful service* that changes its state after processing client commands, and sends replies to the clients that issued them.

The goal of this technique is to make the state at each replica to evolve in a consistent way, thus making the service completely and accurately replicated at each replica. In order to achieve this behavior, it is necessary to satisfy three properties:

   # Replicas only apply deterministic changes to the state;
   # All replicas start with the same state;
   # All replicas execute the same sequence of operations.

The first two requirements can be fulfilled without any special library, but the last one requires the replicas to communicate among themselfs, which demands the execution of a complex *agreement protocol*, in order to guarantee that the commands are executed in the same order across all replicas.

BFT-SMaRt provides this agreement protocol, assuming that the programmer ensures that the application using BFT-SMaRt fulfills the first 2 requirements.

= Byzantine Fault Tolerance (BFT) =

BFT-SMaRt is designed to tolerate Byzantine faults. A *Byzantine fault* can be any deviation from the expected behavior of a replica (as opposed to crash faults, where a replica can only fail by stopping its execution). Byzantine faults can happen due to either software bugs, or even due to a skilled adversary that manages to gain control of replicas, thus controlling theirs behavior. Such replicas are therefore addressed as as *malicious replicas*.

Besides Byzantine faults, BFT-SMaRt is also designed to tolerate denial of service attacks (DoS). This type of attack can subvert the time that computations and communications take to complete, thus making it impossible to correctly distinguish a crashed/faulty replica from a delayed replica.

However, in order for such agreement protocol to be able to provide correct replication, the number of malicious replicas needs to be bounded. Furthermore, it is also necessary that the system eventually enters a period where all computation and communication are performed within the expected  time bounds.

Given all aforementioned assumptions, for BFT-SMaRt to execute correctly, less than a third of all replicas of the service can be faulty at any moment. Hence, the total number of replicas *N* must be N >= 3f + 1, where *f* is the maximum number of faulty replicas.

= State Transfer =

= Reconfiguration =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages