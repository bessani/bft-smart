#summary This pages describes how BFT-SMaRt works.

= Introduction =

BFT-SMaRt is a replication library written in Java. It implements state machine replication. It is designed to tolerate Byzantine faults, while still being highly efficient - even if some replicas are faulty. In this page we describe how this library works, in a high level of abstraction.

= State Machine Replication (SMR) =

SMR is a replication technique where an arbitrary number of clients issue commands to a set of servers dubbed replicas. These replicas implement a stateful service that changes its state after processing client commands, and sends replies to the clients that issued them.

The goal of this technique is to make the state at each replica to evolve in a consistent way, thus making the service completely and accurately replicated at each replica. In order to achieve this behavior, it is necessary to satisfy three properties:

* Replicas only apply deterministic changes to the state;
* All replicas start with the same state;
* All replicas execute the same sequence of operations.

The first two requirements can be fulfilled without any special library, but the last one requires the replicas to communicate among themselfs, and that they execute a complex agreement protocol, in order to garantee that the commands are executed in the same order across all replicas.

BFT-SMaRt provides this agreement protocol, assuming that the programmer ensures that the application using BFT-SMaRt fullfills the first 2 requirements.

State Machine Replication (SMR)

= Byzantine Fault Tolerance (BFT) =

= State Transfer =

= Reconfiguration =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages