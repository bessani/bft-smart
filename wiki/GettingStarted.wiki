= BFT-SMaRt demos =

There are several demo applications packed together with BFT-SMaRt source code.
These demos are in the package {{{navigators.smart.tom.demo}}}.

To run any demonstration you first need to configure BFT-SMaRt to define the protocol behavior and the location of each replica.

1) The servers must be specified in the configuration file (see config/hosts.config). An example:

#server id, address and port (the ids from 0 to n-1 are the service replicas)<br />
0 localhost 11234<br />
1 localhost 11235<br /> 
2 localhost 11236<br />
3 localhost 11237<br /> 

2) The system configurations also have to be specified (see config/system.config). Most of the parameters are self explanatory.

You can run the counter demonstration by executing the following commands, from within the main folder:

==Start the servers (4 replicas, to tolerate 1 fault)==

{{{runscripts\smartrun.bat navigators.smart.tom.demo.counter.CounterServer 0}}}<br />
{{{runscripts\smartrun.bat navigators.smart.tom.demo.counter.CounterServer 1}}}<br />
{{{runscripts\smartrun.bat navigators.smart.tom.demo.counter.CounterServer 2}}}<br />
{{{runscripts\smartrun.bat navigators.smart.tom.demo.counter.CounterServer 3}}}<br />

==Start a client==

#if {{{<increment>}}} equals 0 the request will be read-only
#default {{{<number of operations>}}} equals 1000

{{{runscripts\smartrun.bat navigators.smart.tom.demo.counter.CounterClient 1001 <increment> [<number of operations>]}}}

You can use the "runsmart.bat" script in Windows, and the "runsmart.sh" script em Linux. These scripts can be easely be adapted to run other demos, and you can derived other scripts from these ones to run BFT-SMaRt in other operating systems.

Additionally to the counter demo, there is also the random demo. You can run it by using the RandomServer and RandomClient classes located in the package navigators.smart.tom.demo.random.

BFT-SMaRt implements a state transfer protocol, which is already pretty robust. You can activate/de-activate it by editing the "config/system.config" file, and setting the parameter "{{{system.totalordermulticast.state_transfer}}}" to "{{{false}}}".



= Creating your own application =


BFT-SMaRt provides the middleware protocol to order and deliver client requests to applications. In order to use BFT-SMaRt, it is needed to implement the client code which will call the message send interface and the server application which will receive the ordered client messages.

==Client code==

Clients can send messages to replicas using the class {{{navigators.smart.tom.ServiceProxy}}}. To send ordered messages to the replicas the {{{invokeOrdered()}}} method must be called. To send messages that don't need to be ordered, the method to be called is {{{invokeUnordered()}}}.
A third option to send messages is {{{invokeAsynchronous()}}}. This last method permits specify for which servers the message has to be send. It also permits implement a custom processing of the server replies through the interface {{{navigators.smart.communication.client.ReplyListener}}}.

==Server code==

To process the requests on the server side, the application must implement the interfaces suitable to the business needs and use {{{navigators.smart.tom.ServiceReplica}}} class to receive the requests.
The interfaces to be implemented allows the processing of ordered and unordered requests, transfer and store state, process batch of requests batches and forward replies to clients.
The interfaces to be implemented are in the package {{{navigators.smart.tom.server}}}.